/**
 * OakOS Dashboard API
 * The Dashboard API provides a secure way to remotely issue commands to OakOS devices. All endpoints are generated from the [OakOS Platform gRPC API](https://github.com/OakLabsInc/platform-protos) 
 *
 * OpenAPI spec version: 5.0.0
 * Contact: oakos@zivelo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GenericReponse', 'model/InstallRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GenericReponse'), require('../model/InstallRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.dashboard) {
      root.dashboard = {};
    }
    root.dashboard.ApplicationApi = factory(root.dashboard.ApiClient, root.dashboard.GenericReponse, root.dashboard.InstallRequest);
  }
}(this, function(ApiClient, GenericReponse, InstallRequest) {
  'use strict';

  /**
   * Application service.
   * @module api/ApplicationApi
   * @version 5.0.0
   */

  /**
   * Constructs a new ApplicationApi. 
   * @alias module:api/ApplicationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Factory Reset
     * Erases both the LIVE and IDLE versions and write the default application as both
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.factoryResetWithHttpInfo = function(dashboardMachine) {
      var postBody = null;

      // verify the required parameter 'dashboardMachine' is set
      if (dashboardMachine === undefined || dashboardMachine === null) {
        throw new Error("Missing the required parameter 'dashboardMachine' when calling factoryReset");
      }


      var pathParams = {
        'dashboardMachine': dashboardMachine
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/machine/{dashboardMachine}/application/FactoryReset', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Factory Reset
     * Erases both the LIVE and IDLE versions and write the default application as both
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.factoryReset = function(dashboardMachine) {
      return this.factoryResetWithHttpInfo(dashboardMachine)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Install
     * Generates a new IDLE version from a given set of Docker tags and credentials, then pulls the necessary Docker images. Status reports are streamed back for each pull. The final message will contain the new docker-compose.yaml just like ViewIdle response.  If any devices matching the globs below are present when an app is installed then they must be present when the app is started: /dev/video* /dev/ttyACM*
     * @param {module:model/InstallRequest} body 
     * @param {String} dashboardMachine 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.streaming 
     * @param {Number} opts.timeout 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenericReponse} and HTTP response
     */
    this.installWithHttpInfo = function(body, dashboardMachine, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling install");
      }

      // verify the required parameter 'dashboardMachine' is set
      if (dashboardMachine === undefined || dashboardMachine === null) {
        throw new Error("Missing the required parameter 'dashboardMachine' when calling install");
      }


      var pathParams = {
        'dashboardMachine': dashboardMachine
      };
      var queryParams = {
        'streaming': opts['streaming'],
        'timeout': opts['timeout'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenericReponse;

      return this.apiClient.callApi(
        '/machine/{dashboardMachine}/application/install', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Install
     * Generates a new IDLE version from a given set of Docker tags and credentials, then pulls the necessary Docker images. Status reports are streamed back for each pull. The final message will contain the new docker-compose.yaml just like ViewIdle response.  If any devices matching the globs below are present when an app is installed then they must be present when the app is started: /dev/video* /dev/ttyACM*
     * @param {module:model/InstallRequest} body 
     * @param {String} dashboardMachine 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.streaming 
     * @param {Number} opts.timeout 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenericReponse}
     */
    this.install = function(body, dashboardMachine, opts) {
      return this.installWithHttpInfo(body, dashboardMachine, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start
     * Starts the LIVE application (if it is not already started)
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.startWithHttpInfo = function(dashboardMachine) {
      var postBody = null;

      // verify the required parameter 'dashboardMachine' is set
      if (dashboardMachine === undefined || dashboardMachine === null) {
        throw new Error("Missing the required parameter 'dashboardMachine' when calling start");
      }


      var pathParams = {
        'dashboardMachine': dashboardMachine
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/machine/{dashboardMachine}/application/start', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Start
     * Starts the LIVE application (if it is not already started)
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.start = function(dashboardMachine) {
      return this.startWithHttpInfo(dashboardMachine)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Status
     * Shows whether application is running, whether it crashed if it is not running, and the time that it entered its current state.
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.statusWithHttpInfo = function(dashboardMachine) {
      var postBody = null;

      // verify the required parameter 'dashboardMachine' is set
      if (dashboardMachine === undefined || dashboardMachine === null) {
        throw new Error("Missing the required parameter 'dashboardMachine' when calling status");
      }


      var pathParams = {
        'dashboardMachine': dashboardMachine
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/machine/{dashboardMachine}/application/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Status
     * Shows whether application is running, whether it crashed if it is not running, and the time that it entered its current state.
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.status = function(dashboardMachine) {
      return this.statusWithHttpInfo(dashboardMachine)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop
     * Stops the LIVE application (if it is not already stopped)
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.stopWithHttpInfo = function(dashboardMachine) {
      var postBody = null;

      // verify the required parameter 'dashboardMachine' is set
      if (dashboardMachine === undefined || dashboardMachine === null) {
        throw new Error("Missing the required parameter 'dashboardMachine' when calling stop");
      }


      var pathParams = {
        'dashboardMachine': dashboardMachine
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/machine/{dashboardMachine}/application/stop', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Stop
     * Stops the LIVE application (if it is not already stopped)
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.stop = function(dashboardMachine) {
      return this.stopWithHttpInfo(dashboardMachine)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Swap Idle and Live
     * Stops the application (if not already stopped), switches the LIVE and IDLE versions, and then starts the application using the new LIVE version regardless of whether it was running before. This is the last step to DEPLOY an application. It is also used to ROLLBACK.
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.swapIdleAndLiveWithHttpInfo = function(dashboardMachine) {
      var postBody = null;

      // verify the required parameter 'dashboardMachine' is set
      if (dashboardMachine === undefined || dashboardMachine === null) {
        throw new Error("Missing the required parameter 'dashboardMachine' when calling swapIdleAndLive");
      }


      var pathParams = {
        'dashboardMachine': dashboardMachine
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/machine/{dashboardMachine}/application/SwapIdleAndLive', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Swap Idle and Live
     * Stops the application (if not already stopped), switches the LIVE and IDLE versions, and then starts the application using the new LIVE version regardless of whether it was running before. This is the last step to DEPLOY an application. It is also used to ROLLBACK.
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.swapIdleAndLive = function(dashboardMachine) {
      return this.swapIdleAndLiveWithHttpInfo(dashboardMachine)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * View Idle
     * Shows the IDLE version docker-compose.yaml
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.viewIdleWithHttpInfo = function(dashboardMachine) {
      var postBody = null;

      // verify the required parameter 'dashboardMachine' is set
      if (dashboardMachine === undefined || dashboardMachine === null) {
        throw new Error("Missing the required parameter 'dashboardMachine' when calling viewIdle");
      }


      var pathParams = {
        'dashboardMachine': dashboardMachine
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/machine/{dashboardMachine}/application/viewIdle', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * View Idle
     * Shows the IDLE version docker-compose.yaml
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.viewIdle = function(dashboardMachine) {
      return this.viewIdleWithHttpInfo(dashboardMachine)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * View Live
     * Shows the LIVE version docker-compose.yaml
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.viewLiveWithHttpInfo = function(dashboardMachine) {
      var postBody = null;

      // verify the required parameter 'dashboardMachine' is set
      if (dashboardMachine === undefined || dashboardMachine === null) {
        throw new Error("Missing the required parameter 'dashboardMachine' when calling viewLive");
      }


      var pathParams = {
        'dashboardMachine': dashboardMachine
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/machine/{dashboardMachine}/application/viewLive', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * View Live
     * Shows the LIVE version docker-compose.yaml
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.viewLive = function(dashboardMachine) {
      return this.viewLiveWithHttpInfo(dashboardMachine)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
