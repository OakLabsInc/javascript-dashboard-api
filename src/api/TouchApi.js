/**
 * OakOS Dashboard API
 * The Dashboard API provides a secure way to remotely issue commands to OakOS devices. All endpoints are generated from the [OakOS Platform gRPC API](https://github.com/OakLabsInc/platform-protos) 
 *
 * OpenAPI spec version: 5.0.0
 * Contact: oakos@zivelo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.dashboard) {
      root.dashboard = {};
    }
    root.dashboard.TouchApi = factory(root.dashboard.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Touch service.
   * @module api/TouchApi
   * @version 5.0.0
   */

  /**
   * Constructs a new TouchApi. 
   * @alias module:api/TouchApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Configure
     * Applies configuration to a specific display  ## &#x60;calibration&#x60; Four space-separated integers representing &#x60;&lt;min-x max-x min-y max-y&gt;&#x60;. Use empty-string to use default calibration.  Note that once calibration is changed it can only be reset to default by rebooting.  It is recommended that you start with extreme values, such as \&quot;0 32768 0 32768\&quot;, and then manually change values one axis at a time until physical touches are aligned as desired.  ## &#x60;rotate&#x60; Rotate the interface relative to its physical upright direction NOT relative to the current rotation or a display&#39;s image.  &#x60;&#x60;&#x60;   NO_ROTATE &#x3D; 0;   LEFT &#x3D; 1;  // turn 90 degrees counter-clockwise   RIGHT &#x3D; 2;  // turn 90 degrees clockwise   INVERTED &#x3D; 3;  // turn 180 degrees &#x60;&#x60;&#x60; 
     * @param {String} body 
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.touchConfigureWithHttpInfo = function(body, dashboardMachine) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling touchConfigure");
      }

      // verify the required parameter 'dashboardMachine' is set
      if (dashboardMachine === undefined || dashboardMachine === null) {
        throw new Error("Missing the required parameter 'dashboardMachine' when calling touchConfigure");
      }


      var pathParams = {
        'dashboardMachine': dashboardMachine
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/machine/{dashboardMachine}/touch/configure', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Configure
     * Applies configuration to a specific display  ## &#x60;calibration&#x60; Four space-separated integers representing &#x60;&lt;min-x max-x min-y max-y&gt;&#x60;. Use empty-string to use default calibration.  Note that once calibration is changed it can only be reset to default by rebooting.  It is recommended that you start with extreme values, such as \&quot;0 32768 0 32768\&quot;, and then manually change values one axis at a time until physical touches are aligned as desired.  ## &#x60;rotate&#x60; Rotate the interface relative to its physical upright direction NOT relative to the current rotation or a display&#39;s image.  &#x60;&#x60;&#x60;   NO_ROTATE &#x3D; 0;   LEFT &#x3D; 1;  // turn 90 degrees counter-clockwise   RIGHT &#x3D; 2;  // turn 90 degrees clockwise   INVERTED &#x3D; 3;  // turn 180 degrees &#x60;&#x60;&#x60; 
     * @param {String} body 
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.touchConfigure = function(body, dashboardMachine) {
      return this.touchConfigureWithHttpInfo(body, dashboardMachine)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Info
     * Lists displays, current configuration and supported configurations
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.touchInfoWithHttpInfo = function(dashboardMachine) {
      var postBody = null;

      // verify the required parameter 'dashboardMachine' is set
      if (dashboardMachine === undefined || dashboardMachine === null) {
        throw new Error("Missing the required parameter 'dashboardMachine' when calling touchInfo");
      }


      var pathParams = {
        'dashboardMachine': dashboardMachine
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/machine/{dashboardMachine}/touch/info', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Info
     * Lists displays, current configuration and supported configurations
     * @param {String} dashboardMachine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.touchInfo = function(dashboardMachine) {
      return this.touchInfoWithHttpInfo(dashboardMachine)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
