swagger: '2.0'
info:
  version: "5.0.0"
  title: OakOS Dashboard API
  description: 'The Dashboard API provides a secure way to remotely issue commands to OakOS devices. All endpoints are generated from the [OakOS Platform gRPC API](https://github.com/OakLabsInc/platform-protos)'
  license:
    name:  Apache-2.0
  contact:
    email: oakos@zivelo.com
    name: OakOS Support
    url: 'https://docs.zivelo.com/'
host: dashboard.oak.host
basePath: /api/v5
securityDefinitions:
  Authorization:
    type: apiKey
    description: Authorization Header
    name: Authorization
    in: header
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  '/machine/{dashboardMachine}/network/ForgetWiFi':
    post:
      description: Removes stored WiFi configuration.
      summary: Forget Wifi
      tags:
        - Network
      operationId: forgetWiFi
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/ForgetWifiRequest'
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/network/AddWiFi':
    post:
      description: 'Adds or overwrites configuration for connecting to a specific WiFi network. The host will then attempt to connect to the network whenever it is available. These settings are persisted until `ForgetWifi` is used.'
      summary: Add Wifi
      tags:
        - Network
      operationId: addWiFi
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/WifiConfiguration'
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/network/info':
    get:
      description: 'Shows network information for all Ethernet and WiFi devices, including current network addresses and MAC addresses.'
      summary: Info
      tags:
        - Network
      operationId: NetworkInfo
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/network/ListKnownWiFiNetworks':
    get:
      description: 'Lists the WiFi network configurations that are available to this host.'
      summary: 'List Known Wifi Networks'
      tags:
        - Network
      operationId: listKnownWiFiNetworks
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/network/WiFiScan':
    get:
      description: 'Lists visible WiFi networks using the first available WiFi interface'
      summary: Wifi Scan
      tags:
        - Network
      operationId: wiFiScan
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/host/reboot':
    post:
      description: 'Enables the provided list of Platform Modules and disables those not listed. Use ListModules to see module_id values.'
      summary: Reboot
      tags:
        - Host
      operationId: reboot
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/host/info':
    get:
      description: 'Basic host information, including hostname, current time and timezone, and software versions'
      summary: Host information
      tags:
        - Host
      operationId: HostInfo
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: Machine Hostname
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/application/FactoryReset':
    get:
      description: 'Erases both the LIVE and IDLE versions and write the default application as both'
      summary: Factory Reset
      tags:
        - Application
      operationId: factoryReset
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/application/viewIdle':
    get:
      description: 'Shows the IDLE version docker-compose.yaml'
      summary: View Idle
      tags:
        - Application
      operationId: viewIdle
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/application/SwapIdleAndLive':
    get:
      description: 'Stops the application (if not already stopped), switches the LIVE and IDLE versions, and then starts the application using the new LIVE version regardless of whether it was running before. This is the last step to DEPLOY an application. It is also used to ROLLBACK.'
      summary: Swap Idle and Live
      tags:
        - Application
      operationId: swapIdleAndLive
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/application/viewLive':
    get:
      description: 'Shows the LIVE version docker-compose.yaml'
      summary: View Live
      tags:
        - Application
      operationId: viewLive
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/application/status':
    get:
      description: 'Shows whether application is running, whether it crashed if it is not running, and the time that it entered its current state.'
      summary: Status
      tags:
        - Application
      operationId: status
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/application/start':
    get:
      description: 'Starts the LIVE application (if it is not already started)'
      summary: Start
      tags:
        - Application
      operationId: start
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/application/install':
    post:
      description: >-
        Generates a new IDLE version from a given set of Docker tags and credentials, then pulls the necessary Docker images. Status reports are streamed back for each pull. The final message will contain the new docker-compose.yaml just like ViewIdle response. 
        If any devices matching the globs below are present when an app is installed then they must be present when the app is started:
        /dev/video*
        /dev/ttyACM*
      summary: Install
      tags:
        - Application
      operationId: install
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: streaming
          in: query
          required: false
          type: boolean
          description: ''
        - name: timeout
          in: query
          required: false
          type: integer
          format: int32
          exclusiveMaximum: false
          exclusiveMinimum: false
          description: ''
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/InstallRequest'
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GenericReponse'
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/application/stop':
    get:
      description: 'Stops the LIVE application (if it is not already stopped)'
      summary: Stop
      tags:
        - Application
      operationId: stop
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/automatic/view':
    get:
      description: 'Exposes the currently stored Configuration'
      summary: View
      tags:
        - Automatic
      operationId: view
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/automatic/apply':
    get:
      description: 'Uses the stored Configuration message to configure the appropriate other services'
      summary: Apply
      tags:
        - Automatic
      operationId: apply
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/automatic/clear':
    get:
      description: 'Erases the currently stored Configuration so that no automatic configuration will be done on next Platform start-up.'
      summary: Clear
      tags:
        - Automatic
      operationId: clear
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/automatic/store':
    post:
      description: 'Creates a Configuration message that, when sent to the Store RPC, would lead to automatic configuration resulting in the same settings that are in place when Generate was called'
      summary: Store
      tags:
        - Automatic
      operationId: store
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/AutomaticStoreRequest'
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/automatic/generate':
    get:
      description: 'Creates a Configuration message that, when sent to the Store RPC, would lead to automatic configuration resulting in the same settings that are in place when Generate was called'
      summary: Generate
      tags:
        - Automatic
      operationId: generate
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/display/configureGlobal':
    post:
      description: Applies configuration that affects all displays
      summary: Configure Global
      tags:
        - Display
      operationId: displayConfigureGlobal
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/DisplayGlobalConfiguration'
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/display/info':
    get:
      description: 'Lists displays, current configuration and supported configurations'
      summary: Info
      tags:
        - Display
      operationId: displayInfo
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/display/configure':
    post:
      description: Applies configuration to a specific display
      summary: Configure
      tags:
        - Display
      operationId: displayConfigure
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            type: string
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/touch/configure':
    post:
      description: >
        Applies configuration to a specific display


        ## `calibration`

        Four space-separated integers representing `<min-x max-x min-y max-y>`.
        Use empty-string to use default calibration. 

        Note that once calibration is changed it can only be reset to default by
        rebooting.


        It is recommended that you start with extreme values,

        such as "0 32768 0 32768", and then manually change values one axis at a
        time until physical touches are aligned as desired.


        ## `rotate`

        Rotate the interface relative to its physical upright direction NOT
        relative to the current rotation or a display's image.


        ```
          NO_ROTATE = 0;
          LEFT = 1;  // turn 90 degrees counter-clockwise
          RIGHT = 2;  // turn 90 degrees clockwise
          INVERTED = 3;  // turn 180 degrees
        ```
      summary: Configure
      tags:
        - Touch
      operationId: touchConfigure
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            type: string
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/touch/info':
    get:
      description: 'Lists displays, current configuration and supported configurations'
      summary: Info
      tags:
        - Touch
      operationId: touchInfo
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/audio/configure':
    post:
      description: 'Applies configuration to an audio device, i.e. change the volume. Note: Must be between 0 and 100 inclusive 0 is effectively mute and 100 is maximum volume'
      summary: Configure
      tags:
        - Audio
      operationId: audioConfigure
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/AudioRequest'
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/machine/{dashboardMachine}/audio/info':
    get:
      description: 'Lists available mixers which correspond to connected audio devices; also shows the current configuration, i.e. volume and mute settings You may have to guess-and-check to determine which mixer corresponds to the physical device you want to control.'
      summary: Info
      tags:
        - Audio
      operationId: audioInfo
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/claim/remove/{claimMachine}/{claimDomain}':
    get:
      description: 'Remove the claim from a machine. This will erase all command history and other attributes, use with caution'
      summary: Claim Remove
      tags:
        - Manage
      operationId: claimRemove
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: claimMachine
          in: path
          required: true
          type: string
          description: ''
        - name: claimDomain
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/claim/complete/{claimMachine}/{claimCode}/{claimDomain}':
    get:
      description: 'Complete a claim for a machine, using the code shown on the Default Application of OakOS'
      summary: Claim Complete
      tags:
        - Manage
      operationId: claimComplete
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: claimMachine
          in: path
          required: true
          type: string
          description: ''
        - name: claimCode
          in: path
          required: true
          type: string
          description: ''
        - name: claimDomain
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/manage/{dashboardMachine}/attribute/name':
    post:
      description: 'Change the `human_name` attribute for a machine. If left blank, it will delete the name entirely'
      summary: Change Friendly Name
      tags:
        - Manage
      operationId: changeName
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/ChangeFriendlyNameRequest'
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  '/manage/{dashboardMachine}':
    get:
      description: 'Get all metadata about a machine'
      summary: Machine Info
      tags:
        - Manage
      operationId: machineInfo
      deprecated: false
      produces:
        - application/json
      parameters:
        - name: dashboardMachine
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            type: object
          headers: {}
      security:
        - Authorization: []
  /auth/email/json:
    post:
      description: ''
      summary: Login
      tags:
        - Auth
      operationId: login
      deprecated: false
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: email
          in: formData
          required: true
          type: string
          description: Full email address
        - name: password
          in: formData
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/AuthenticationResponse'
          examples:
            text/plain:
              uid: bWLByJ6WCPNiaAjsjw87KAA
              email: hero@snowcrash.com
              displayName: Hero Protagonist
              customClaims:
                domain: snowcrash-com
                domainUser: hero
                role: admin
              metadata:
                lastSignInTime: 'Sat, 16 Feb 2019 17:42:29 GMT'
                creationTime: 'Tue, 12 Dec 2018 21:27:12 GMT'
              clientToken: base64FirebaseClientToken
          headers: {}
      security: []
  /auth/jwt/validate:
    get:
      summary: Verify Bearer Token
      tags:
        - Auth
      operationId: jwtValidate
      deprecated: false
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/JwtVerifyResponse'
          headers: {}
      security:
        - Authorization: []
definitions:
  AudioRequest:
    title: AudioRequest
    description: 'Lists available mixers which correspond to connected audio devices; also shows the current configuration, i.e. volume and mute settings You may have to guess-and-check to determine which mixer corresponds to the physical device you want to control.'
    example:
      mixer_id: 'PCH:Master'
      configuration:
        mute: false
        volume: 100
    type: object
    properties:
      mixer_id:
        type: string
      configuration:
        $ref: '#/definitions/AudioConfiguration'
    required:
      - mixer_id
      - configuration
  TouchRequest:
    title: TouchRequest
    type: object
    properties:
      touchDeviceId:
        example: Elo_Touch_Solutions_E801039_Edgley
        type: string
      configuration:
        $ref: '#/definitions/TouchDeviceConfiguration'
    required:
      - touchDeviceId
      - configuration
  ChangeFriendlyNameRequest:
    title: ChangeFriendlyNameRequest
    description: Change a machines friendly name identifier
    example:
      name: '{{machineName}}'
    type: object
    properties:
      name:
        description: 'friendly name, no special characters'
        example: my-new-unit
        type: string
    required:
      - name
  AudioConfiguration:
    title: AudioConfiguration
    type: object
    properties:
      mute:
        type: boolean
      volume:
        type: integer
        format: int32
    required:
      - mute
      - volume
  DisplayConfiguration:
    title: DisplayConfiguration
    example:
      enabled: false
      mode: ''
      reflect: NO_REFLECT
      rotate: NO_ROTATE
      transform: ''
    type: object
    properties:
      enabled:
        example: true
        type: boolean
        default: 'true'
      mode:
        type: string
      reflect:
        example: NO_REFLECT
        type: string
        default: NO_REFLECT
      rotate:
        example: NO_ROTATE
        type: string
        default: NO_ROTATE
      transform:
        example: 10 239 123 51
        type: string
    required:
      - enabled
      - mode
      - reflect
      - rotate
      - transform
  TouchDeviceConfiguration:
    title: TouchDeviceConfiguration
    example:
      calibration: ''
      orientation: FORWARD_LEFT
    type: object
    properties:
      calibration:
        type: string
      orientation:
        example: FORWARD_LEFT
        type: string
    required:
      - calibration
      - orientation
  DisplayRequest:
    title: DisplayRequest
    type: object
    properties:
      displayId:
        example: DP1
        type: string
      configuration:
        type: object
        additionalProperties:
          $ref: '#/definitions/DisplayConfiguration'
    required:
      - displayId
      - configuration
  ApplicationConfiguration:
    title: ApplicationConfiguration
    type: object
    properties:
      image:
        example: 'index.docker.io/oaklabs/app-seattle-lobby:1.0.5'
        type: string
      username:
        example: '{{dockerUsername}}'
        type: string
      password:
        example: '{{dockerPassword}}'
        type: string
      environment:
        $ref: '#/definitions/ApplicationEnvironmentConfiguration'
    required:
      - image
      - username
      - password
      - environment
  DisplayGlobalConfiguration:
    title: DisplayGlobalConfiguration
    example:
      dpi: 96
    type: object
    properties:
      dpi:
        example: 96
        type: integer
        format: int32
    required:
      - dpi
  ApplicationEnvironmentConfiguration:
    title: ApplicationEnvironmentConfiguration
    example:
      NODE_ENV: development
    type: object
    properties:
      NODE_ENV:
        example: development
        type: string
    required:
      - NODE_ENV
  InstallRequest:
    title: InstallRequest
    example:
      services:
        - image: 'index.docker.io/oaklabs/app-seattle-lobby:1.0.5'
          username: '{{dockerUsername}}'
          password: '{{dockerPassword}}'
          environment:
            NODE_ENV: development
    type: object
    properties:
      services:
        type: array
        items:
          $ref: '#/definitions/ApplicationConfiguration'
    required:
      - services
  ForgetWifiRequest:
    title: ForgetWifiRequest
    example:
      ssid: '{{wifi-ssid}}'
    type: object
    properties:
      ssid:
        type: string
    required:
      - ssid
  WifiConfiguration:
    title: WifiConfiguration
    example:
      ssid: '{{wifi-ssid}}'
      passphrase: '{{wifi-password}}'
    type: object
    properties:
      ssid:
        type: string
      passphrase:
        type: string
    required:
      - ssid
      - passphrase
  AutomaticStoreRequest:
    title: AutomaticStoreRequest
    type: object
    properties:
      audio:
        type: array
        items:
          $ref: '#/definitions/AudioRequest'
      display:
        type: array
        items:
          $ref: '#/definitions/DisplayRequest'
      touch:
        type: array
        items:
          $ref: '#/definitions/TouchRequest'
      displayGlobal:
        $ref: '#/definitions/DisplayGlobalConfiguration'
    required:
      - audio
      - display
      - touch
      - displayGlobal
  AuthenticationResponse:
    title: AuthenticationResponse
    example:
      uid: bWLByJ6WCPNiaAjsjw87KAA
      email: hero@snowcrash.com
      displayName: Hero Protagonist
      customClaims:
        domain: snowcrash-com
        domainUser: hero
        role: admin
      metadata:
        lastSignInTime: 'Sat, 16 Feb 2019 17:42:29 GMT'
        creationTime: 'Tue, 12 Dec 2018 21:27:12 GMT'
      clientToken: base64FirebaseClientToken
    type: object
    properties:
      uid:
        description: Firebase User ID
        example: bWLByJ6WCPNiaAjsjw87KAA
        type: string
      email:
        description: Email address
        example: hero@snowcrash.com
        type: string
      displayName:
        description: Friendly display name
        example: Hero Protagonist
        type: string
      customClaims:
        description: Dashboard specific user metadata
        example:
          domain: snowcrash-com
          domainUser: hero
          role: admin
        type: object
        additionalProperties:
          $ref: '#/definitions/UserCustomClaims'
      firebaseToken:
        description: 'Firebase Authentication token, to be used in future firebase requests'
        example: base64FirebaseClientToken
        type: string
      bearerToken:
        description: JWT Bearer Token to use for future API requests
        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJiV0xCeUo2V0NQTmlhSFhtM1RXTTd3bVNXRjYzIiwiZW1haWwiOiJqc21pdGhAZXhhbXBsZS5jb20iLCJkaXNwbGF5TmFtZSI6IkpvaG4gU21pdGgiLCJjdXN0b21DbGFpbXMiOnsiZG9tYWluIjoiZXhhbXBsZS1jb20iLCJkb21haW5Vc2VyIjoiam9obiIsInJvbGUiOiJlZGl0b3IifSwibWV0YWRhdGEiOnsibGFzdFNpZ25JblRpbWUiOiJXZWQsIDI3IEZlYiAyMDE5IDE3OjAwOjQ0IEdNVCIsImNyZWF0aW9uVGltZSI6IlR1ZSwgMTIgRGVjIDIwMTcgMjE6Mjc6MTIgR01UIn0sImlhdCI6MTU1MTI4Njg0NSwiYXVkIjoiZGFzaGJvYXJkLm9hay5ob3N0IiwiaXNzIjoiZGFzaGJvYXJkLm9hay5ob3N0In0.xb2wwJLUr-ls0SaJ7BTW4sbWboW5W8r6NBHF5u8yMpc'
        type: string
      metadata:
        example:
          lastSignInTime: 'Sat, 16 Feb 2019 17:42:29 GMT'
          creationTime: 'Tue, 12 Dec 2018 21:27:12 GMT'
        type: object
    required:
      - uid
      - email
      - displayName
      - customClaims
      - firebaseToken
      - bearerToken
      - metadata
  UserCustomClaims:
    title: UserCustomClaims
    example:
      domain: snowcrash-com
      domainUser: hero
      role: admin
    type: object
    properties:
      domain:
        example: snowcrash-com
        type: string
      domainUser:
        example: hero
        type: string
      role:
        example: admin
        type: string
    required:
      - domain
      - domainUser
      - role
  GenericReponse:
    title: GenericReponse
    description: The response schema for every `machine` API call
    type: object
    properties:
      code:
        description: Error code of the call
        example: '""'
        type: string
        default: '""'
      details:
        description: Error message
        example: '""'
        type: string
        default: '""'
      body:
        type: object
  CustomClaims:
    title: CustomClaims
    example:
      domain: oaklabs-is
      domainUser: flynn
      role: superadmin
    type: object
    properties:
      domain:
        example: oaklabs-is
        type: string
      domainUser:
        example: flynn
        type: string
      role:
        example: superadmin
        type: string
    required:
      - domain
      - domainUser
      - role
  JwtVerifyResponse:
    title: JwtVerifyResponse
    description: JWT Verify Response
    example:
      uid: bWLByJ6WCPNiaHXajs7d7wmSWF63
      email: joe@example.com
      displayName: Joe Example
      customClaims:
        domain: example-com
        domainUser: joe
        role: editor
      metadata:
        lastSignInTime: 'Tue, 05 Mar 2019 19:27:13 GMT'
        creationTime: 'Tue, 12 Dec 2017 21:27:12 GMT'
      iat: 1551814095
      exp: 1552418895
      aud: dashboard.oak.host
      iss: dashboard.oak.host
    type: object
    properties:
      uid:
        example: bWLByJ6WCPNiskdaosTWM7wmSWF63
        type: string
      email:
        example: john.smith@example.com
        type: string
      displayName:
        example: John Smith
        type: string
      customClaims:
        $ref: '#/definitions/CustomClaims'
      iat:
        example: 1551814095
        type: integer
        format: int32
      exp:
        example: 1552418895
        type: integer
        format: int32
      aud:
        example: dashboard.oak.host
        type: string
      iss:
        example: dashboard.oak.host
        type: string
      metadata:
        example:
          lastSignInTime: 'Tue, 05 Mar 2019 19:27:13 GMT'
          creationTime: 'Tue, 12 Dec 2017 21:27:12 GMT'
        type: object
    required:
      - uid
      - email
      - displayName
      - customClaims
      - iat
      - exp
      - aud
      - iss
      - metadata

tags:
  - name: Authentication
  - name: Network
    description: >-
      View and configure host's networking settings.
      
      
      Currently, only WPA-PSK WiFi networks are supported. Wired network connections cannot be altered and should be configured via DHCP.
  - name: Host
    description: >-
      Exposes information and control specific to the host and not related to any specific hardware.


      Also enables control of Platform Modules, which can add more functionality to the platform when desired. Modules are not enabled by default to preserve system resources.


      If an attempt is made to use an rpc provided by a module that is not active it may return an 502 error.
  - name: Application
    description: >-
      Manage the user's application. Application are defined by docker-compose.yaml files.
      

      The host will hold two application versions called LIVE and IDLE. Both are docker-compose.yaml files.


      The LIVE version is the version that is actually run.


      The IDLE version is a placeholder where new applications can be installed.


      When a new version is installed as the IDLE version, it can then be deployed by swapping the LIVE and IDLE versions. They can then be swapped again to roll back if necessary.


      To DEPLOY an application, you will need to use Install and SwapIdleAndLive at least. 
  - name: Automatic
    description: >-
      Enables configuration when the Platform starts.


      This is used to make settings "permanent", such as ensuring the rotation of a monitor and touch calibration after a reboot.


      Note that network connection settings are persisted independently. See `network.proto` for more details.


      When the Platform starts, the Apply RPC is called using the Configuration message that was previously passed to the Store RPC. It is also possible to manually use the Apply RPC at any other time. The automatic configuration is NOT applied every time an application starts. It is only after the Platform is restarted, which is normally only after a reboot.


      Requests in the fields of the stored Configuration message are sent, one at a time, in the order they are shown in the Configuration message definition below, to the appropriate RPCs of the services where those message types are defined.


      Instead of creating the Configuration message by hand, it is recommended that all of the configuration for each other service is prepared at once and then the Generate RPC is used to create a Configuration message that would match the prepared state. Then that message can be passed to the Store RPC. This is essentially a "Save Configuration" flow.


      If there is an error in any of the configuration requests, then the Apply RPC will stop executing at that point. When the cause of the issue is fixed, such as if a missing hardware component was reconnected, then the Apply endpoint can be called again to retry the automatic configuration.
  - name: Display
    description: >-
      Configure displays (monitors, TVs, etc) that are connected to the host.


      A "mode" is a string representing a resolution and frameratetogether, e.g. "1024x768@60.00". Because values for modes must bean exact text match in order to be recognized they should only begenerated by this service. Users should not attempt to apply amode to a display if it is not listed in that display's'available_modes'. When in doubt, it is recommended that every display is configuredwith its preferred_mode and the DPI be set to 96.


      'display_id' values come from the name of the physical port the display is plugged into.
  - name: Touch
    description: >-
      Configure human touch interfaces including IR and capacitive sensors
      

      'touch_device_id' values come from serial numbers reported by the touch devices themselves.
  - name: Audio
    description: >-
      Configure audio devices that are connected to the host


      Currently, only audio output devices are supported. Microphones are not supported. 'mixer_id' values come from the available ports on the host device regardless of whether an audio device is connected.
  - name: Manage
    description: Manage the metadata around machines